/*
 * Interface do programa
 */
/**
 * mainFrame2.java
 *
 * Created on 04/10/2012, 21:17:41
 */
package tcc;

import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Goron
 */
// <editor-fold defaultstate="collapsed" desc="Utils and filters class">
class Utils {

    // Cria as strings de extensão
    public final static String aa = "aa";
    public final static String pdb = "pdb";

    /**
     * Captura a extensão de algum arquivo.
     * @param File f
     * @return ext
     */
    public static String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 && i < s.length() - 1) {
            ext = s.substring(i + 1).toLowerCase();
        }
        return ext;
    }
}

class aaFilter extends FileFilter {

    /**
     * Função para determinar se o arquivo deve ser mostrado ou não
     * @param file
     * @return true or false
     */
    @Override
    public boolean accept(File file) {

        // Checa se o arquivo é um diretório se for retorna true e será mostrado
        if (file.isDirectory()) {
            return true;
        }

        // Captura as extensões dos arquivos
        String extension = Utils.getExtension(file);

        // Caso as extensões sejam diferentes de nulo e iguais a aa retorna true
        if (extension != null && extension.equals(Utils.aa)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Função para por como descrição a string "*.aa"
     * @return "*.aa"
     */
    @Override
    public String getDescription() {
        return "*.aa";
    }
}

class pdbFilter extends FileFilter {

    /**
     * Função para determinar se o arquivo deve ser mostrado ou não
     * @param file
     * @return true or false
     */
    @Override
    public boolean accept(File file) {

        // Checa se o arquivo é um diretório se for retorna true e será mostrado
        if (file.isDirectory()) {
            return true;
        }

        // Captura as extensões dos arquivos
        String extension = Utils.getExtension(file);

        // Caso as extensões sejam diferentes de nulo e iguais a aa retorna true
        if (extension != null && extension.equals(Utils.pdb)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Função para por como descrição a string "*.pdb"
     * @return "*.pdb"
     */
    @Override
    public String getDescription() {
        return "*.pdb";
    }
}
//</editor-fold>
public class mainFrame extends javax.swing.JFrame {
    // Variável para anunciar que o bot~]ao start não foi acionado e que nenuma
    // função dentro dele foi executada

    boolean startJob = true;
    int times = 0;

    /** Creates new form mainFrame */
    public mainFrame() {
        initComponents();
        setIcon();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        aaText = new javax.swing.JTextField();
        pdbText = new javax.swing.JTextField();
        aaButton = new javax.swing.JButton();
        pdbButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        protList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        SameSequenceCheckBox = new javax.swing.JCheckBox();
        start = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        startModel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ProMod");
        setName("ProMod"); // NOI18N
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Paths"));

        aaText.setText("Insert your .aa file path here.");
        aaText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aaTextMouseClicked(evt);
            }
        });
        aaText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                aaTextFocusLost(evt);
            }
        });

        pdbText.setText("Insert your .pdb file path here.");
        pdbText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pdbTextMouseClicked(evt);
            }
        });
        pdbText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pdbTextFocusLost(evt);
            }
        });

        aaButton.setText("Browse");
        aaButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aaButtonMouseClicked(evt);
            }
        });

        pdbButton.setText("Browse");
        pdbButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pdbButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aaText, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .addComponent(pdbText, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pdbButton)
                    .addComponent(aaButton))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aaButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pdbButton)
                    .addComponent(pdbText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        protList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        protList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(protList);

        jLabel1.setText("Select the target sequence:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 51, Short.MAX_VALUE)
        );

        SameSequenceCheckBox.setText("If you have put all your chains in same sequence check this box");
        SameSequenceCheckBox.setName(""); // NOI18N

        start.setText("Start");
        start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startMouseClicked(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Number of models"));

        jSpinner1.setValue(10);
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        startModel.setText("Start Model");
        startModel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startModelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startModel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startModel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(start)
                                .addGap(180, 180, 180)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(15, 15, 15))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SameSequenceCheckBox)
                                .addContainerGap())))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(start)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SameSequenceCheckBox))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel2.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(statusLabel)
                .addContainerGap(666, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aaTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aaTextMouseClicked
        if ("".equals(aaText.getText().toString()) || "Insert your .aa file path here.".equals(aaText.getText().toString())) {
            aaText.setText(null);
        }
    }//GEN-LAST:event_aaTextMouseClicked

    private void pdbTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pdbTextMouseClicked
        if ("".equals(pdbText.getText().toString()) || "Insert your .pdb file path here.".equals(pdbText.getText().toString())) {
            pdbText.setText(null);
        }
    }//GEN-LAST:event_pdbTextMouseClicked

    private void pdbButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pdbButtonMouseClicked
        // Instanciaa interface de seleção de arquivo
        final JFileChooser fc = new JFileChooser();

        // Adiciona o filtro para apenas extensões .pdb
        fc.addChoosableFileFilter(new pdbFilter());

        // Torna o filtro criado como default
        fc.setFileFilter(new pdbFilter());

        // Checa se o botão pressionado é o correto
        if (evt.getSource() == pdbButton) {

            // Chama a interface de seleção de arquivo
            int returnVal = fc.showOpenDialog(pdbButton);

            // Checa se a operação foi aprovada
            if (returnVal == JFileChooser.APPROVE_OPTION) {

                // Pega o arquivo selecionado
                File file = fc.getSelectedFile();

                try {
                    // Escreve o caminho do arquivo selecionado no campo aaText
                    pdbText.setText(file.getCanonicalPath());
                    statusLabel.setText("Sucessful .pdb file opening");
                } catch (IOException ex) {
                    statusLabel.setText("Error while opening the file.");
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                statusLabel.setText("Cancelled");
            }
        }
    }//GEN-LAST:event_pdbButtonMouseClicked

    private void aaButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aaButtonMouseClicked
        // Instancia a interface de seleção de arquivo
        final JFileChooser fc = new JFileChooser();

        // Adiciona o filtro para apenas extensões .aa
        fc.addChoosableFileFilter(new aaFilter());

        // Torna o filtro criado como default
        fc.setFileFilter(new aaFilter());

        // Checa se a origem do evento foi o botão correto
        if (evt.getSource() == aaButton) {

            // Chama a interface de seleção de arquivo
            int returnVal = fc.showOpenDialog(aaButton);

            // Checa se a operação foi aprovada
            if (returnVal == JFileChooser.APPROVE_OPTION) {

                // Pega o arquivo selecionado
                File file = fc.getSelectedFile();

                try {
                    // Escreve o caminho do arquivo selecionado no campo aaText
                    aaText.setText(file.getCanonicalPath());
                    statusLabel.setText("Sucessful .aa file opening");
                } catch (IOException ex) {

                    statusLabel.setText("Error while opening the file.");
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                statusLabel.setText("Cancelled");
            }
        }
    }//GEN-LAST:event_aaButtonMouseClicked

    private void startMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startMouseClicked
        boolean errorAA;
        boolean errorPDB;

        if (startJob) {
            times++;

            protList.setModel(new DefaultListModel());

            errorPDB = PDB();
            errorAA = AA();
            if (errorAA && errorPDB) {
                statusLabel.setText("Invalid path for PDB and AA.");
            } else {
                if (errorAA) {
                    statusLabel.setText("Invalid path for AA.");
                } else {
                    if (errorPDB) {
                        statusLabel.setText("Invalid path for PDB.");
                    } else {
                        statusLabel.setText("Sucessful opening for both files.");
                        startJob = false;
                    }
                }
            }
        } else {
            try {
                // Dá início à sequência de gravação do arquivo de texto
                conversorModeller.Start(protList.getSelectedValue().toString(), SameSequenceCheckBox.isSelected(), protList.getSelectedIndex());
            } catch (IOException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                statusLabel.setText("Please, select your protein.");
            }

            // Prepara o programa para executar a próxima sequência
            startJob = true;
        }
    }//GEN-LAST:event_startMouseClicked

    private boolean PDB() {
        try {
            conversorModeller.workerPdb(pdbText.getText());
            // Anuncia que todas funções iniciais para o botão foram
            // executadas com sucesso
            return false;
        } catch (Exception e) {
            statusLabel.setText(e.toString());
            return true;
        }
    }

    private boolean AA() {
        try {
            // Inicia as operações com o texto capturado nos dois paths e
            // captura os nomes das sequências
            List<String> seqNames = new ArrayList<String>();
            seqNames = conversorModeller.workerAa(aaText.getText(), times);

            // Limpa e adiciona os nomes na jList e anuncia que tudo correu como esperado
            DefaultListModel listModel = (DefaultListModel) protList.getModel();
            listModel.removeAllElements();

            protList.setListData(seqNames.toArray());
            seqNames.clear();
            statusLabel.setText("Working");
            return false;
        } catch (Exception e) {
            return true;
        }
    }

    /**
     * Função para checar se já foi utilizada, caso não tenha sido, reescreve
     * o texto que estava escrito inicialmnente
     * @param evt 
     */
    private void aaTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aaTextFocusLost
        if ("".equals(aaText.getText().toString())) {
            aaText.setText("Insert your .aa file path here.");
        }
    }//GEN-LAST:event_aaTextFocusLost

    /** 
     * Função para checar se já foi utilizada, caso não tenha sido, reescreve
     * o texto que estava escrito inicialmente
     * @param evt 
     */
    private void pdbTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pdbTextFocusLost
        if ("".equals(pdbText.getText().toString())) {
            pdbText.setText("Insert your .pdb file path here.");
        }
    }//GEN-LAST:event_pdbTextFocusLost

private void startModelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startModelMouseClicked
    int value = (Integer) jSpinner1.getValue();

    try {
        // Dá início à sequência de gravação do arquivo de texto
        conversorModeller.StartModel(protList.getSelectedValue().toString(), SameSequenceCheckBox.isSelected(), protList.getSelectedIndex(), value);
    } catch (IOException ex) {
        Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_startModelMouseClicked

private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged

    if ((Integer) jSpinner1.getValue() < 1) {
        jSpinner1.setValue(1);

    }
}//GEN-LAST:event_jSpinner1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new mainFrame().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox SameSequenceCheckBox;
    private javax.swing.JButton aaButton;
    private javax.swing.JTextField aaText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JButton pdbButton;
    private javax.swing.JTextField pdbText;
    private javax.swing.JList protList;
    private javax.swing.JButton start;
    private javax.swing.JButton startModel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
    }
}
